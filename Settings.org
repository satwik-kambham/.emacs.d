#+title: Emacs Configuration

Emacs configuration using babel.

Run the following command to restart emacs server:
#+BEGIN_SRC bash
  systemctl --user restart emacs.server
#+END_SRC

* Load straight.el package manager
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC

** Load Packages

#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (straight-use-package 'catppuccin-theme)
#+END_SRC

* UI Customization

** Remove UI Elements
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Load theme
Catppuccin theme customized to gruvbox
#+BEGIN_SRC emacs-lisp
  (load-theme 'catppuccin :no-confirm)
  (catppuccin-set-color 'crust "#141617")
  (catppuccin-set-color 'mantle "#1d2021")
  (catppuccin-set-color 'base "#1d2021")
  (catppuccin-set-color 'surface0 "#282828")
  (catppuccin-set-color 'surface1 "#3c3836")
  (catppuccin-set-color 'surface2 "#3c3836")
  (catppuccin-reload)
#+END_SRC

** Display line numbers
Also display column in mode line

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (column-number-mode)
  (dolist (mode '(term-mode-hook
		eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Font settings
#+BEGIN_SRC emacs-lisp
  ;; (set-frame-font "Monaspace Neon-16" nil t)
  (add-to-list 'default-frame-alist '(font . "Monaspace Neon-16"))
  (setq line-spacing 5)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC

** Word Wrap
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

* Quality of life

** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Ivy, swiper, counsel
#+BEGIN_SRC emacs-lisp
    (use-package ivy
      :straight t
      :demand t
      :diminish ivy-mode
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (ivy-mode 1))

    (use-package swiper
      :straight t
      :bind (("C-s" . swiper)))

    (use-package counsel
      :straight t
      :bind (("M-x" . counsel-M-x)))

    (use-package ivy-rich
      :straight t
      :init
      (ivy-rich-mode 1))
#+END_SRC

* Modal Editing
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'ryo-modal)
  (straight-use-package 'expand-region)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun modal-set-mark-here ()
    "Set the mark at the location of the point."
    (interactive) (set-mark (point)))

  (defun modal-set-mark-if-inactive ()
    "Set the mark if it isn't active."
    (interactive)
    (unless (use-region-p) (set-mark (point))))

  (defun exit-modal-mode ()
    "Exit ryo modal mode."
    (interactive)
    (ryo-modal-mode 0))

  (defun modal-deactivate-mark ()
    "Deactivate the mark."
    (interactive)
    (deactivate-mark))

  (defun modal-select-line (count)
    "Select and expend lines."
    (interactive "p")
    (beginning-of-line)
    (unless (use-region-p) (set-mark (point)))
    (forward-line count))

  (defun modal-create-new-line (count)
    "Create new line below."
    (interactive "p")
    (end-of-line)
    (dotimes (_ count)
      (electric-newline-and-maybe-indent)))

  (defun modal-kill-selected-text ()
    "Kill selected text."
    (interactive)
    (kill-region (region-beginning) (region-end)))
#+END_SRC

Enable globalSubwordMode.

#+BEGIN_SRC emacs-lisp
  (defun setup-modal-keybinds ()
    "Setup keybinds in navigation mode."
    (global-subword-mode t)
    (ryo-modal-keys
     ("h" backward-char :first '(modal-deactivate-mark))
     ("H" backward-char :first '(modal-set-mark-if-inactive))
     ("j" next-line :first '(modal-deactivate-mark))
     ("J" next-line :first '(modal-set-mark-if-inactive))
     ("k" previous-line :first '(modal-deactivate-mark))
     ("K" previous-line :first '(modal-set-mark-if-inactive))
     ("l" forward-char :first '(modal-deactivate-mark))
     ("L" forward-char :first '(modal-set-mark-if-inactive))
     ("g" beginning-of-buffer :first '(modal-deactivate-mark))
     ("G" end-of-buffer :first '(modal-deactivate-mark))
     ("a" forward-char :exit t)
     ("w" forward-word :first '(modal-set-mark-here))
     ("W" forward-word :first '(modal-set-mark-if-inactive))
     ("b" backward-word :first '(modal-set-mark-here))
     ("B" backward-word :first '(modal-set-mark-if-inactive))
     ("x" modal-select-line)
     ("d" modal-kill-selected-text)
     ("c" modal-kill-selected-text :exit t)
     ("i" exit-modal-mode)
     ("a" forward-char :exit t)
     ("o" modal-create-new-line :exit t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ryo-modal
    :straight t
    :commands ryo-modal-mode
    :bind ("C-c SPC" . ryo-modal-mode)
    :hook (after-init . modal-mode-setup)
    :config
    (defun modal-mode-setup ()
      "Setup modal mode"
      (setup-modal-keybinds)))
#+END_SRC
